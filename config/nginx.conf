########################################################
#main context
########################################################

error_log                           /etc/nginx/logs/nginx-error.log;
worker_processes                    2;
worker_rlimit_nofile                8192;


events { 
worker_connections                  4096;
accept_mutex                        on;
}

########################################################
#http context
########################################################

http {
    
    ###############################
    #disable the display of nginx version 
    ###############################
    server_tokens                   off;

    ###############################
    #let nginx identify file types
    ###############################
    include                         /etc/nginx/mime.types;
    default_type                    application/octet-stream;

    ###############################
    #log file config
    ###############################
    log_format                      main '$remote_addr - $remote_user [$time_local]  $status '
                                        '"$request" $body_bytes_sent "$http_referer" '
                                        '"$http_user_agent" "$http_x_forwarded_for"';
    access_log                      /etc/nginx/logs/nginx-access.log main;

    ###############################
    #redirect to app server
    ###############################
    upstream app {
        server                      localhost:8000 fail_timeout=0;
    }

    ###############################
    #redirect all requests to https
    ###############################
    server {
        listen                      80 default_server;
        listen                      [::]:80 default_server;
        server_name                 _;
        return                      301 https://$host$request_uri;
    }

    ###############################
    #app redirect config
    ###############################
    server {

        ###############################
        #variable for app upstream so nginx will not fail if it is offline
        ###############################
        set $upstream_app app;

        listen                      443 ssl http2;
        server_name                 localhost;
        keepalive_timeout           5;
        client_max_body_size        4G;

        ssl_prefer_server_ciphers   on;
        ssl_session_timeout         1h;
        ssl_session_cache           shared:SSL:10m;
        ssl_protocols               TLSv1.2;
        ssl_certificate             /etc/nginx/ssl/app.crt;
        ssl_certificate_key         /etc/nginx/ssl/app.key;
        ssl_ciphers                 ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

        proxy_cookie_path           / "/; HTTPOnly; Secure";
        add_header                  'Referrer-Policy' 'origin';
        add_header                  X-Frame-Options SAMEORIGIN;
        add_header                  X-Content-Type-Options "nosniff";
        add_header                  X-XSS-Protection "1; mode=block" always;  
        add_header                  Content-Security-Policy "frame-ancestors 'self';";
        add_header                  Content-Security-Policy "upgrade-insecure-requests; ";
        add_header                  Strict-Transport-Security "max-age=31536000";

        location / {
            proxy_pass              http://$upstream_app;
            proxy_set_header        X-Real-IP           $remote_addr;
            proxy_set_header        X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto   $scheme;
            proxy_set_header        Host                $host;
        }

    }

}